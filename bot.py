# –ò–º–ø–æ—Ä—Ç aiogram
from aiogram import Bot
from aiogram import Dispatcher
from aiogram import executor
from aiogram import types

# –ò–º–ø–æ—Ä—Ç –º–æ–∏ —Ñ–∞–π–ª–æ–≤
from resource import Keyboard
from resource import QrCode

# –ò–º–ø–æ—Ä—Ç DotEnv –∏ OS
from dotenv import load_dotenv
import os

load_dotenv() # –ó–∞–≥—Ä—É–∑–∫–∞ DotEnv
bot = Bot(os.getenv("TOKEN")) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
disp = Dispatcher(bot=bot) # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º

# –ö–æ–º–∞–Ω–¥–∞ Start
@disp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    first_name = message.from_user.first_name # –ó–∞–ø–∏—Å—å –∏–º–µ–Ω–∏ —Ç–≥

    await message.answer(f"{first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üñêÔ∏è", reply_markup=Keyboard.user_keyb)
    await message.answer(
        f"{first_name}, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª.",
        reply_markup=Keyboard.keyb_sub
    )

# –ö–æ–º–∞–Ω–¥–∞ back
@disp.message_handler(commands=["back"])
async def back(message: types.Message):
    await message.answer("–í—ã –≤—ã—à–ª–∏ –Ω–∞–∑–∞–¥!", reply_markup=Keyboard.user_keyb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç)
@disp.message_handler(text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚öíÔ∏è")
async def tools(message: types.Message):
    first_name = message.from_user.first_name  # –ó–∞–ø–∏—Å—å –∏–º–µ–Ω–∏ —Ç–≥

    await message.answer(
        f"{first_name}, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –º–µ–Ω—é üß∞",
        reply_markup=Keyboard.keyb_tools
    )
    await message.answer("–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤–≤–µ–¥–∏—Ç–µ /back")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç)
@disp.message_handler(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìÉ")
async def infos(message: types.Message):
    await message.answer(
        """
            –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @Zadvornow
GitHub: https://github.com/Skybicx
        """
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç)
@disp.message_handler(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üÜò")
async def infos(message: types.Message):
    await message.answer("–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç)
@disp.message_handler(text="–°–æ–∑–¥–∞—Ç—å QrCode")
async def create_qrcode(message: types.Message):
    first_name = message.from_user.first_name  # –ó–∞–ø–∏—Å—å –∏–º–µ–Ω–∏ —Ç–≥
    await message.answer(f"{first_name}, –≤–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ QrCode")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QrCode
@disp.message_handler(content_types=["text"])
async def check_message(message: types.Message):
    await message.answer("–ü–æ–¥–≥–æ–¥–æ–≤–∫–∞ —Ñ–∞–π–ª–∞...")
    if os.path.exists("qrcode.png") == False:
        QrCode.Create(message.text) # –°–æ–∑–¥–∞–Ω–∏–µ qr-–∫–æ–¥–∞
        file = open("qrcode.png", 'rb') # –û—Ç–∫—Ä—ã—Ç–∏–µ qr-–∫–æ–¥–∞
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...")
        await message.answer_photo(photo=file)
        file.close() # –ó–∞–∫—Ä—ã—Ç–∏–µ qr-–∫–æ–¥–∞
        os.remove("qrcode.png") # –£–¥–∞–ª–µ–Ω–∏–µ qr-–∫–æ–¥–∞
    else:
        os.remove("qrcode.png") # –£–¥–∞–ª–µ–Ω–∏–µ qr-–∫–æ–¥–∞
        QrCode.Create(message.text) # –°–æ–∑–¥–∞–Ω–∏–µ qr-–∫–æ–¥–∞
        file = open("qrcode.png", 'rb') # –û—Ç–∫—Ä—ã—Ç–∏–µ qr-–∫–æ–¥–∞
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...")
        await message.answer_photo(photo=file)
        file.close() # –ó–∞–∫—Ä—ã—Ç–∏–µ qr-–∫–æ–¥–∞
        os.remove("qrcode.png") # –£–¥–∞–ª–µ–Ω–∏–µ qr-–∫–æ–¥–∞

if __name__ == "__main__":
    executor.start_polling(disp, skip_updates=True)